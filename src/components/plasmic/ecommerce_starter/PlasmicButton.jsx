// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2WTtS4quVgjDpWxePxJCTZ
// Component: ZwkS9sai7CnT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: 2WTtS4quVgjDpWxePxJCTZ/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: ZwkS9sai7CnT/css
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: blIuZVHeh19O/icon

export const PlasmicButton__VariantProps = new Array(
  "showStartIcon",
  "showEndIcon",
  "iconOnly",
  "colors",
  "size",
  "rounded",
  "states",
  "isDisabled"
);

export const PlasmicButton__ArgProps = new Array(
  "startIcon",
  "children",
  "endIcon",
  "link"
);

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__colors_black]: hasVariant(variants, "colors", "black"),
          [sty.root__colors_blue]: hasVariant(variants, "colors", "blue"),
          [sty.root__colors_gray]: hasVariant(variants, "colors", "gray"),
          [sty.root__colors_lightGrayOutline]: hasVariant(
            variants,
            "colors",
            "lightGrayOutline"
          ),

          [sty.root__colors_lightGray]: hasVariant(
            variants,
            "colors",
            "lightGray"
          ),

          [sty.root__colors_link]: hasVariant(variants, "colors", "link"),
          [sty.root__colors_white]: hasVariant(variants, "colors", "white"),
          [sty.root__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),

          [sty.root__rounded]: hasVariant(variants, "rounded", "rounded"),
          [sty.root__rounded_size_large]:
            hasVariant(variants, "rounded", "rounded") &&
            hasVariant(variants, "size", "large"),
          [sty.root__showEndIcon]: hasVariant(
            variants,
            "showEndIcon",
            "showEndIcon"
          ),

          [sty.root__size_large]: hasVariant(variants, "size", "large"),
          [sty.root__size_narrow]: hasVariant(variants, "size", "narrow"),
          [sty.root__size_small]: hasVariant(variants, "size", "small"),
          [sty.root__states_active]: hasVariant(variants, "states", "active")
        }
      )}
    >
      {(
        hasVariant(variants, "iconOnly", "iconOnly")
          ? true
          : hasVariant(variants, "showEndIcon", "showEndIcon")
          ? false
          : hasVariant(variants, "showStartIcon", "showStartIcon")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__eCjNf, {
            [sty.freeBox__iconOnly__eCjNf3MpiJ]: hasVariant(
              variants,
              "iconOnly",
              "iconOnly"
            ),

            [sty.freeBox__showEndIcon__eCjNfWtZj]: hasVariant(
              variants,
              "showEndIcon",
              "showEndIcon"
            ),

            [sty.freeBox__showStartIcon__eCjNfJjncI]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            ),

            [sty.freeBox__size_large__eCjNfhid1Z]: hasVariant(
              variants,
              "size",
              "large"
            ),

            [sty.freeBox__size_small__eCjNfOxlP]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <MenuIcon
                    className={classNames(defaultcss.all, sty.svg__z1ZQ1)}
                    role={"img"}
                  />
                ),

                value: args.startIcon,
                className: classNames(sty.slotTargetStartIcon, {
                  [sty.slotTargetStartIcon__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetStartIcon__colors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),

                  [sty.slotTargetStartIcon__colors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),

                  [sty.slotTargetStartIcon__showEndIcon]: hasVariant(
                    variants,
                    "showEndIcon",
                    "showEndIcon"
                  ),

                  [sty.slotTargetStartIcon__size_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),

                  [sty.slotTargetStartIcon__size_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(hasVariant(variants, "iconOnly", "iconOnly") ? true : true)
        ? p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__colors_black]: hasVariant(
                variants,
                "colors",
                "black"
              ),

              [sty.slotTargetChildren__colors_blue]: hasVariant(
                variants,
                "colors",
                "blue"
              ),

              [sty.slotTargetChildren__colors_gray]: hasVariant(
                variants,
                "colors",
                "gray"
              ),

              [sty.slotTargetChildren__colors_link]: hasVariant(
                variants,
                "colors",
                "link"
              ),

              [sty.slotTargetChildren__iconOnly]: hasVariant(
                variants,
                "iconOnly",
                "iconOnly"
              ),

              [sty.slotTargetChildren__isDisabled]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              ),

              [sty.slotTargetChildren__showEndIcon]: hasVariant(
                variants,
                "showEndIcon",
                "showEndIcon"
              ),

              [sty.slotTargetChildren__size_large]: hasVariant(
                variants,
                "size",
                "large"
              ),

              [sty.slotTargetChildren__size_small]: hasVariant(
                variants,
                "size",
                "small"
              )
            })
          })
        : null}
      {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : false) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__sAsL, {
            [sty.freeBox__showEndIcon__sAsLWtZj]: hasVariant(
              variants,
              "showEndIcon",
              "showEndIcon"
            ),

            [sty.freeBox__size_small__sAsLOxlP]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <MenuIcon
                    className={classNames(defaultcss.all, sty.svg__lrOsD)}
                    role={"img"}
                  />
                ),

                value: args.endIcon,
                className: classNames(sty.slotTargetEndIcon, {
                  [sty.slotTargetEndIcon__colors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),

                  [sty.slotTargetEndIcon__colors_link]: hasVariant(
                    variants,
                    "colors",
                    "link"
                  ),

                  [sty.slotTargetEndIcon__showEndIcon]: hasVariant(
                    variants,
                    "showEndIcon",
                    "showEndIcon"
                  )
                })
              })
            : null}
        </div>
      ) : null}
    </p.Stack>
  );
}

function useBehavior(props, ref) {
  return pp.useButton(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },

      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
