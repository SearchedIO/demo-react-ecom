// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2WTtS4quVgjDpWxePxJCTZ
// Component: AHNGq-qwR1as
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QS8WGXlJZeEM/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: 2WTtS4quVgjDpWxePxJCTZ/projectcss
import * as sty from "./PlasmicCartItem.module.css"; // plasmic-import: AHNGq-qwR1as/css
import RecycleIcon from "./icons/PlasmicIcon__Recycle"; // plasmic-import: tTCqDzR1WZmT/icon
import Secure2Icon from "./icons/PlasmicIcon__Secure2"; // plasmic-import: KhjfnOaai3s2/icon

export const PlasmicCartItem__VariantProps = new Array();

export const PlasmicCartItem__ArgProps = new Array(
  "itemImg",
  "title",
  "productNumber",
  "size",
  "quantity"
);

function PlasmicCartItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"200px"}
          src={
            args.itemImg !== undefined
              ? args.itemImg
              : {
                  src: shoe23Hh8R8XnLtzFd,
                  fullWidth: 450,
                  fullHeight: 450,
                  aspectRatio: undefined
                }
          }
        />
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___8Qic0)}
        >
          <a
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(defaultcss.a, sty.link)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__qwnUt)}>
              {p.renderPlasmicSlot({
                defaultContents: "Some Title",
                value: args.title,
                className: classNames(sty.slotTargetTitle)
              })}
            </div>
          </a>

          <div className={classNames(defaultcss.all, sty.freeBox__tgHjV)}>
            {p.renderPlasmicSlot({
              defaultContents: "#00000",
              value: args.productNumber,
              className: classNames(sty.slotTargetProductNumber)
            })}
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox___3E3Qu)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__mhE5W
              )}
            >
              {"Size: "}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "11",
              value: args.size
            })}
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox___2RbIb)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__vMptu
              )}
            >
              {"Quantity: "}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "1",
              value: args.quantity
            })}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__oRv3O)}
          >
            <RecycleIcon
              className={classNames(defaultcss.all, sty.svg__vds3)}
              role={"img"}
            />

            <Secure2Icon
              className={classNames(defaultcss.all, sty.svg__o7D3E)}
              role={"img"}
            />
          </p.Stack>
        </p.Stack>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "img", "link"],
  img: ["img"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCartItem__ArgProps,
      internalVariantPropNames: PlasmicCartItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCartItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCartItem";
  } else {
    func.displayName = `PlasmicCartItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCartItem = Object.assign(
  // Top-level PlasmicCartItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicCartItem
    internalVariantProps: PlasmicCartItem__VariantProps,
    internalArgProps: PlasmicCartItem__ArgProps
  }
);

export default PlasmicCartItem;
/* prettier-ignore-end */
